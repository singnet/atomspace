/*
 * tests/query/ExecutionOutputUTest.cxxtest
 *
 * Copyright (C) 2009 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/util/Logger.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/core/NumberNode.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/atoms/value/LinkValue.h>
#include <opencog/atoms/value/StringValue.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>

#include "imply.h"

using namespace opencog;

class ExecutionOutputUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace as;
	SchemeEval eval;

public:

	ExecutionOutputUTest(void) : eval(&as)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);

		eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

	}

	~ExecutionOutputUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_exec(void);
	void test_varsub(void);
	void test_query_exec(void);
	void test_clear_box_single_argument(void);
	void test_clear_box_single_argument_link(void);
	void test_value(void);
	void test_recursion(void);
};

#define an as.add_node
#define al as.add_link
#define getarity(hand) hand->get_arity()
#define getlink(hand,pos) hand->getOutgoingAtom(pos)

void ExecutionOutputUTest::tearDown(void)
{
	as.clear();
}
void ExecutionOutputUTest::setUp(void)
{
}

/*
 * preposition reasoning test.
 *
 * Expect to get the following result, given the above data:
 *
 *    EvaluationLink
 *       DefinedLinguisticRelationshipNode "capital_of"
 *       ListLink
 *          WordNode "capital"
 *          DefinedLinguisticRelationshipNode "of"
 */
void ExecutionOutputUTest::test_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	/*
	 * Create an implication link that will be tested.
	 * This sets up the following structures:
	 *  # IF _obj(be, $var1) ^
	 *       $prep($var1, $var2)
	 *      THEN %ExecutionOutputLink("make-it", $var1, $prep)
	 */
	Handle clauses =
		al(AND_LINK,
			al(EVALUATION_LINK,
				an(PREDICATE_NODE, "_obj"),
				al(LIST_LINK,
					an(CONCEPT_NODE, "be"),
					an(VARIABLE_NODE, "$var1")
				)
			),
			al(EVALUATION_LINK,
				an(VARIABLE_NODE, "$prep"),
				al(LIST_LINK,
					an(VARIABLE_NODE, "$var1"),
					an(VARIABLE_NODE, "$var2")
				)
			)
		);
	Handle implicand =
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm:make-verb-prep"),
			al(LIST_LINK,
				an(VARIABLE_NODE, "$var1"),
				an(VARIABLE_NODE, "$prep")
			)
		);

	Handle hcapital;
	// Create data on which the above pattern should match
	al(EVALUATION_LINK,
		an(PREDICATE_NODE, "_obj"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "be"),
			hcapital = an(CONCEPT_NODE, "capital")
		)
	)->setTruthValue(TruthValue::TRUE_TV());

	Handle hprep;
	al(EVALUATION_LINK,
		hprep = an(PREDICATE_NODE, "of"),
		al(LIST_LINK,
			an(CONCEPT_NODE, "capital"),
			an(CONCEPT_NODE, "Spain")
		)
	)->setTruthValue(TruthValue::TRUE_TV());

	const char * str =
	"(define (make-verb-prep verb prep) \n"
	"	(cog-new-link 'EvaluationLink \n"
	"		(cog-new-node 'ConceptNode \n"
	"			(string-append (cog-name verb) \"_\" (cog-name prep)) \n"
	"		) \n"
	"		(cog-new-link 'ListLink \n"
	"			(cog-new-node 'ConceptNode (cog-name verb)) \n"
	"			(cog-new-node 'PredicateNode (cog-name prep)) \n"
	"		) \n"
	"	) \n"
	")";
	eval.eval(str);

	// Result should be a ListLink
	Handle result = imply(&as, clauses, implicand);

	// There should be only one solution: the Berlin one.
	// The Madrid graph should be rejected because of the
	// NOT definite link.
	TSM_ASSERT_EQUALS("wrong number of solutions found", 1, getarity(result));

	// Then, evaluationLink, as above.
	Handle heval = getlink(result, 0);
	Handle vcap_of = getlink(heval, 0);
	Handle hlist = getlink(heval, 1);
	Handle vcapital = getlink(hlist, 0);
	Handle vprep = getlink(hlist, 1);

	TSM_ASSERT_EQUALS("incorrect capital", hcapital, vcapital);
	TSM_ASSERT_EQUALS("incorrect prep", hprep, vprep);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test execution of variables.
 * During pattern matching, variables can bind to ExecutionOutputLinks
 * If they are then repeated in the implcand, the ExecutionOutputLink
 * must be executed there, with the resulting answer returned.
 */
void ExecutionOutputUTest::test_varsub(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	const char * str = "(define (retarg x) x)\n";
	eval.eval(str);

	Handle resolution;
	// Raw data
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "situation"),
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm: retarg"),
			al(LIST_LINK,
				resolution = an(CONCEPT_NODE, "resolution")
			)
		)
	);

	Handle deliverance;
	al(CONTEXT_LINK,
		an(CONCEPT_NODE, "predicament"),
		al(EXECUTION_OUTPUT_LINK,
			an(GROUNDED_SCHEMA_NODE, "scm: retarg"),
			al(LIST_LINK,
				deliverance = an(CONCEPT_NODE, "deliverance")
			)
		)
	);

	Handle situ =
	al(BIND_LINK,
	   al(CONTEXT_LINK,
	      an(CONCEPT_NODE, "situation"),
	      an(VARIABLE_NODE, "$action")
	      ),
	   an(VARIABLE_NODE, "$action")
	);
	BindLinkPtr situation(createBindLink(*LinkCast(situ)));

	Handle pred =
	al(BIND_LINK,
	   al(CONTEXT_LINK,
	      an(CONCEPT_NODE, "predicament"),
	      an(VARIABLE_NODE, "$action")
	      ),
	   an(VARIABLE_NODE, "$action")
	);
	BindLinkPtr predicament(createBindLink(*LinkCast(pred)));

	// Now perform the search.
	DefaultImplicator simpl(&as);
	simpl.implicand = situation->get_implicand();
	situation->satisfy(simpl);

	// The result_list contains a list of the grounded expressions.
	Handle res = HandleCast(*simpl.get_result_set().begin());
	printf("res is %s\n", res->to_short_string().c_str());
	TSM_ASSERT_EQUALS("incorrect resolution", res, resolution);

	// Now perform the search.
	DefaultImplicator pimpl(&as);
	pimpl.implicand = predicament->get_implicand();
	predicament->satisfy(pimpl);

	// The result_list contains a list of the grounded expressions.
	Handle del = HandleCast(*pimpl.get_result_set().begin());
	printf("del is %s\n", del->to_short_string().c_str());
	TSM_ASSERT_EQUALS("incorrect delivarance", del, deliverance);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Query ExecutionOutputLink atoms, with varying schemas.
 */
void ExecutionOutputUTest::test_query_exec(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval.eval("(load-from-path \"tests/query/exec.scm\")");

	Handle exec_query = eval.eval_h("exec-query");
	Handle results = satisfying_set(&as, exec_query);
	TS_ASSERT_EQUALS(results->get_arity(), 4);

	exec_query = eval.eval_h("quote-exec-query");
	results = satisfying_set(&as, exec_query);
	TS_ASSERT_EQUALS(results->get_arity(), 3);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Execute clear box with single argument
 */
void ExecutionOutputUTest::test_clear_box_single_argument(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle X = an(VARIABLE_NODE, "$X"),
		PXX = al(PLUS_LINK, X, X),
		twice = al(LAMBDA_LINK, PXX),
		N21 = an(NUMBER_NODE, "21"),
		twice21 = al(EXECUTION_OUTPUT_LINK, twice, N21);

	Instantiator inst(&as);
	Handle expected = an(NUMBER_NODE, "42");
	Handle result = HandleCast(inst.execute(twice21));
	result = as.add_atom(result);

	TS_ASSERT_EQUALS(expected, result);

	// should work with variable inside the ListLink too

	Handle N21_LST = al(LIST_LINK, N21);
	Handle twice21_lst = al(EXECUTION_OUTPUT_LINK, twice, N21_LST);
	Handle result_lst = HandleCast(inst.execute(twice21_lst));
	result_lst = as.add_atom(result_lst);

	TS_ASSERT_EQUALS(expected, result_lst);

	logger().debug("END TEST: %s", __FUNCTION__);
}


/**
 * Execute clear box with single argument (a link different than list)
 */
void ExecutionOutputUTest::test_clear_box_single_argument_link(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle AB =
		al(INHERITANCE_LINK,
			an(CONCEPT_NODE, "A"),
			an(CONCEPT_NODE, "B"));

	Handle identity =
		al(LAMBDA_LINK,
			an(VARIABLE_NODE, "$X"),
			an(VARIABLE_NODE, "$X"));

	Handle exec =
		al(EXECUTION_OUTPUT_LINK, identity, AB);

	Instantiator inst(&as);
	Handle expected = AB;
	Handle result = HandleCast(inst.execute(exec));

	TS_ASSERT_EQUALS(expected, result);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void ExecutionOutputUTest::test_value(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval.eval("(load-from-path \"tests/query/exec-gsn.scm\")");

	ValuePtr result = eval.eval_v("(cog-execute! exec-query-handle)");
	TS_ASSERT_EQUALS(result->get_type(), LINK_VALUE);
	ValueSeq vals = LinkValueCast(result)->value();
	TS_ASSERT_EQUALS(vals.size(), 3);
	for (const ValuePtr& va : vals)
		TS_ASSERT_EQUALS(va->get_type(), UNORDERED_LINK);

	//------------
	result = eval.eval_v("(cog-execute! exec-query-link-value)");
	TS_ASSERT_EQUALS(result->get_type(), LINK_VALUE);
	vals = LinkValueCast(result)->value();
	TS_ASSERT_EQUALS(vals.size(), 3);
	for (const ValuePtr& va : vals)
		TS_ASSERT_EQUALS(va->get_type(), LINK_VALUE);

	//------------
	result = eval.eval_v("(cog-execute! exec-query-string-value)");
	TS_ASSERT_EQUALS(result->get_type(), LINK_VALUE);
	vals = LinkValueCast(result)->value();
	TS_ASSERT_EQUALS(vals.size(), 3);
	for (const ValuePtr& va : vals)
		TS_ASSERT_EQUALS(va->get_type(), STRING_VALUE);

	//------------
	result = eval.eval_v("(cog-execute! exec-query-truth-value)");
	TS_ASSERT_EQUALS(result->get_type(), LINK_VALUE);
	vals = LinkValueCast(result)->value();
	TS_ASSERT_EQUALS(vals.size(), 3);
	for (const ValuePtr& va : vals)
	{
		TS_ASSERT_EQUALS(va->get_type(), SIMPLE_TRUTH_VALUE);
		TruthValuePtr stv = TruthValueCast(va);
		TS_ASSERT_DELTA(stv->get_mean(), 0.6, 1.0e-8);
		TS_ASSERT_DELTA(stv->get_confidence(), 0.3, 1.0e-8);
	}

	logger().debug("END TEST: %s", __FUNCTION__);
}

// This tests recursion of ExecutionOutputLinks, on a classic algo:
// the factorial algo.  This test does not actually test the pattern
// matcher, and so does not really belong in this directory...
void ExecutionOutputUTest::test_recursion(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval.eval("(load-from-path \"tests/query/exec-factorial.scm\")");

	Handle result = eval.eval_h(
		"(cog-execute! (ExecutionOutput"
		"     (DefinedSchema \"factorial\") (Number 5)))");

	TS_ASSERT_EQUALS(result->get_type(), NUMBER_NODE);
	double ans = NumberNodeCast(result)->get_value();

	TS_ASSERT_DELTA(ans, 120.0, 1.0e-6);

	logger().debug("END TEST: %s", __FUNCTION__);
}
