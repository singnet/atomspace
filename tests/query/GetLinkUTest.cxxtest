/*
 * tests/query/GetLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * Copyright (C) 2019 Kasimebrahim
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/util/Logger.h>
#include <cxxtest/TestSuite.h>
#include "imply.h"

using namespace opencog;

#define al as->add_link
#define an as->add_node

class GetLinkUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	GetLinkUTest(void)
	{
		// logger().set_level(Logger::FINE);
		logger().set_level(Logger::DEBUG);
		logger().set_sync_flag(true);
		logger().set_print_to_stdout_flag(true);
		logger().set_timestamp_flag(false);

		as = new AtomSpace();
		eval = new SchemeEval(as);
		eval->eval("(use-modules (opencog exec))");
		eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

	}

	~GetLinkUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().get_filename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_unary_get(void);
	void test_get_ill_typed(void);
	void test_binary_get(void);
	void test_free_bound(void);
	void test_eval_clause(void);
	void test_disconnected_binary_get(void);
	void test_disconnected_empty(void);
	void test_not_equal(void);
	void test_disconnected_const_eval(void);
	void test_quote_equal(void);
	void test_plus_pattern_get(void);

	void test_glob_get(void);
	void test_typed_glob_get(void);
	void test_type_choice_glob_get(void);

	void test_embed_vardels(void);
};

void GetLinkUTest::tearDown(void)
{
}

void GetLinkUTest::setUp(void)
{
}

/*
 * Basic single-variable GetLink unit test.
 */
void GetLinkUTest::test_unary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! is-human)");
	Handle hans = eval->eval_h(
		"(SetLink (ConceptNode \"Ben\") (ConceptNode \"Linas\"))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test.
 */
void GetLinkUTest::test_binary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! is-something)");
	Handle hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"Ben\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Linas\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Sparky\") (ConceptNode \"dog\")))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Basic bottom_type GetLink unit test.
 */
void GetLinkUTest::test_get_ill_typed(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! is-nothing)");
	Handle hans = eval->eval_h("(SetLink )");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test; one is free one is bound.
 */
void GetLinkUTest::test_free_bound(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	eval->eval("(load-from-path \"tests/query/get-link.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! is-query)");

	Handle hans = eval->eval_h("(SetLink (ConceptNode \"human\"))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Evaluatable clause GetLink unit test;
 */
void GetLinkUTest::test_eval_clause(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-eval.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! get)");

	Handle hans = eval->eval_h("(SetLink"
	                           "   (ListLink"
	                           "      (ConceptNode \"glib\")"
	                           "      (ConceptNode \"blab\")"
	                           "      (EvaluationLink"
	                           "         (ConceptNode \"glib\")"
	                           "         (ConceptNode \"blab\"))))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two-variable GetLink unit test
 */
void GetLinkUTest::test_disconnected_binary_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link.scm\")");

	Handle g_take_contain = eval->eval_h("g-take-contain");
	Handle hgnd = satisfying_set(as, g_take_contain);
	Handle hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"John\") (ConceptNode \"compound-A\")))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two disconnected components, only one of them has a solution, so
 * the whole request has no solution. It should stop at the first
 * component with no solution, no need to explore the second
 * component.
 */
void GetLinkUTest::test_disconnected_empty(void) {
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();

	Handle inh_ground = al(INHERITANCE_LINK,
	                       an(CONCEPT_NODE, "A"),
	                       an(CONCEPT_NODE, "B")),
		comp_1 = al(INHERITANCE_LINK,
		            an(VARIABLE_NODE, "$A"),
		            an(VARIABLE_NODE, "$B")),
		comp_2 = al(IMPLICATION_LINK,
		            an(VARIABLE_NODE, "$X"),
		            an(VARIABLE_NODE, "$Y")),
		pat = al(AND_LINK, comp_1, comp_2),
		gl = al(GET_LINK, pat),
		result = satisfying_set(as, gl),
		expect = al(SET_LINK, HandleSeq());

	printf("Expected this: %s\n", expect->to_string().c_str());
	printf("Found this answer: %s\n", result->to_string().c_str());

	TS_ASSERT_EQUALS(result, expect);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Test the not-equal predicate.  We want all solutions not equal
 * to a particular atom.
 */
void GetLinkUTest::test_not_equal(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();

	Handle P = an(PREDICATE_NODE, "P");
	Handle Q = an(PREDICATE_NODE, "Q");
	Q->setTruthValue(SimpleTruthValue::TRUE_TV());

	Handle Qvar = an(VARIABLE_NODE, "$Q");
	Handle vardecl = al(VARIABLE_LIST,
	                    al(TYPED_VARIABLE_LINK,
	                       Qvar,
                          an(TYPE_NODE, "PredicateNode")));
	Handle body = al(AND_LINK,
	                 al(NOT_LINK, al(EQUAL_LINK, P, Qvar)),
	                 al(PRESENT_LINK, Qvar));
	Handle gl = al(GET_LINK, vardecl, body);

	Handle result = satisfying_set(as, gl);
	Handle expect = al(SET_LINK, Q);

	printf("Expected this: %s\n", expect->to_string().c_str());
	printf("Found this answer: %s\n", result->to_string().c_str());

	TS_ASSERT_EQUALS(result, expect);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Two disconnected components, one evaluatable is constant
 */
void GetLinkUTest::test_disconnected_const_eval(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();

	Handle inh_ground = al(INHERITANCE_LINK,
	                       an(CONCEPT_NODE, "A"),
	                       an(CONCEPT_NODE, "B"));

	Handle real_comp = al(INHERITANCE_LINK,
	                      an(VARIABLE_NODE, "$A"),
	                      an(VARIABLE_NODE, "$B"));

	Handle virt_comp_pos = al(EVALUATION_LINK,
	                          an(GROUNDED_PREDICATE_NODE, "scm: cog-tv"),
	                          al(LIST_LINK,
	                             an(CONCEPT_NODE, "A")));

	Handle virt_comp_neg = al(NOT_LINK, virt_comp_pos);

	Handle pattern_pos = al(AND_LINK, real_comp, virt_comp_pos);
	Handle getlink_pos = al(GET_LINK, pattern_pos);

	Handle pattern_neg = al(AND_LINK, real_comp, virt_comp_neg);
	Handle getlink_neg = al(GET_LINK, pattern_neg);

	// Evaluatable constant clause is satisfied
	Handle result = satisfying_set(as, getlink_pos);
	Handle expect = al(SET_LINK,
	                   al(LIST_LINK,
	                      an(CONCEPT_NODE, "A"),
	                      an(CONCEPT_NODE, "B")));
	printf("Expected this: %s\n", expect->to_string().c_str());
	printf("Found this answer: %s\n", result->to_string().c_str());
	TS_ASSERT_EQUALS(result, expect);

	// Evaluatable constant clause is not satisfied
	result = satisfying_set(as, getlink_neg);
	expect = al(SET_LINK, HandleSeq());
	printf("Expected this: %s\n", expect->to_string().c_str());
	printf("Found this answer: %s\n", result->to_string().c_str());
	TS_ASSERT_EQUALS(result, expect);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Make sure that quotation is properly consumed before testing for
 * equality.
 */
void GetLinkUTest::test_quote_equal(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-equal.scm\")");

	Handle gl = eval->eval_h("gl");
	Handle result = satisfying_set(as, gl);
	Handle expect = eval->eval_h("expect");

	printf("Expected this: %s\n", expect->to_string().c_str());
	printf("Found this answer: %s\n", result->to_string().c_str());

	TS_ASSERT_EQUALS(result, expect);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Basic PlusLink pattern with GetLink unit test.
 */
void GetLinkUTest::test_plus_pattern_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/executable-pattern.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! plus-pattern)");
	Handle hans = eval->eval_h(
			"(SetLink "
					"(ListLink (NumberNode 3) (NumberNode 5)))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Basic GlobNode with GetLink unit test.
 */
void GetLinkUTest::test_glob_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-glob.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! basic-get)");
	Handle hans =
			eval->eval_h("(SetLink"
			             "  (ListLink"
			             "    (ConceptNode \"glib\")"
			             "    (PredicateNode \"blab\")))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd)

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Type restricted GlobNode with GetLink unit test.
 */
void GetLinkUTest::test_typed_glob_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-glob.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! typed-get)");
	Handle hans = eval->eval_h("(SetLink )");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd)

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Typed GlobNode with GetLink unit test.
 */
void GetLinkUTest::test_type_choice_glob_get(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-glob.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! type-choice-get)");
	Handle hans =
			eval->eval_h("(SetLink"
			             "  (ListLink"
			             "    (ConceptNode \"glib\")"
			             "    (PredicateNode \"blab\")))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd)

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Same as test_unary_get(), test_binary_get(), test_get_ill_typed(),
 * and test_free_bound() except that the variable decls are embedded.
 */
void GetLinkUTest::test_embed_vardels(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as->clear();
	eval->eval("(load-from-path \"tests/query/get-link-embed.scm\")");

	Handle hgnd = eval->eval_h("(cog-execute! is-human)");
	Handle hans = eval->eval_h(
		"(SetLink (ConceptNode \"Ben\") (ConceptNode \"Linas\"))");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	// ----------------------
	hgnd = eval->eval_h("(cog-execute! is-something)");

#define REVERSE 1
#if REVERSE
	// Oh dear ... the embeded declarations end up unordered, which
	// hoses the Getlink we are testing. Whatever, hack aroudn this.
	hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"human\") (ConceptNode \"Ben\"))"
		"(ListLink (ConceptNode \"human\") (ConceptNode \"Linas\"))"
		"(ListLink (ConceptNode \"dog\") (ConceptNode \"Sparky\")))");
#else
	hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"Ben\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Linas\") (ConceptNode \"human\"))"
		"(ListLink (ConceptNode \"Sparky\") (ConceptNode \"dog\")))");
#endif

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	// ----------------------
	hgnd = eval->eval_h("(cog-execute! is-nothing)");
	hans = eval->eval_h("(SetLink )");

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	// ----------------------
	hgnd = eval->eval_h("(cog-execute! g-take-contain)");
#if REVERSE
	hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"compound-A\") (ConceptNode \"John\")))");
#else
	hans = eval->eval_h(
		"(SetLink "
		"(ListLink (ConceptNode \"John\") (ConceptNode \"compound-A\")))");
#endif

	printf("Expected this: %s\n", hans->to_string().c_str());
	printf("Found this answer: %s\n", hgnd->to_string().c_str());

	TSM_ASSERT("Didn't get the expected grounding", hans == hgnd);

	logger().debug("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
